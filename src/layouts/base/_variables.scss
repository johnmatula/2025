@use 'mixins' as *;

// TODO: Reorganize mixed declarations in a cleaner way. The current
// “& {}” kludge allows SCSS to work alongside modern, built-in CSS nesting.
// See https://sass-lang.com/d/mixed-decls for more.



:root {
  
  // VARIABLES
  //
  // Values that will change based on the browser or user are custom CSS
  // properties. Ones that won’t change or only get overridden (like for
  // accessibility) are preprocessed SCSS variables.
  
  & {
    // ROOT EM HEIGHT BASES
    
    --rem-factor: 1;
    
    @include at-least(w2) {
      --rem-factor: 1.25;
    }
    
    @include at-least(w3) {
      --rem-factor: 1.5;
    }
    
    @include at-least(w4) {
      --rem-factor: 1.75;
    }
    
    @include at-least(w5) {
      --rem-factor: 2;
    }
  }
  
  
  // HUES
  //
  // The hues themselves don’t change, so they’re represented as
  // preprocessed variables.
  
  & {
    $hue-white: #fff;
    $hue-black: #000;
    
    $hue-neutral-ff: #f5f3f1;
    $hue-neutral-cc: #e9e7e5;
    $hue-neutral-99: #cdcac7;
    $hue-neutral-66: #a19d99;
    $hue-neutral-33: #524f4c;
    $hue-neutral-00: #121110;
    
    $hue-orange-ff: #fe8676;
    $hue-orange-cc: #f75843;
    $hue-orange-99: #e63d27;
    $hue-orange-66: #bf240f;
    $hue-orange-33: #9d1907;
    $hue-orange-00: #5c0d03;
    
    $hue-lime-ff: #e3fc42;
    $hue-lime-cc: #d5f029;
    $hue-lime-99: #c6dd16;
    $hue-lime-66: #a3b401;
    $hue-lime-33: #778203;
    $hue-lime-00: #4f5400;
    
    $hue-cyan-ff: #6dfdd9;
    $hue-cyan-cc: #4cefcc;
    $hue-cyan-99: #28d8bc;
    $hue-cyan-66: #18b8a0;
    $hue-cyan-33: #0b9182;
    $hue-cyan-00: #01574e;
    
    $hue-purple-ff: #d5a1f7;
    $hue-purple-cc: #c177f2;
    $hue-purple-99: #b05ae6;
    $hue-purple-66: #993bd4;
    $hue-purple-33: #7222a3;
    $hue-purple-00: #540c7f;
    
    $hue-darkerlucent-ff: #f0f0f040;
    $hue-lighterlucent-ff: #f0f0f040;
  }
  
  
  // THEME SEMANTIC COLORS
  
  & {
    --fill-page-default: $hue-neutral-ff;
    --color-text-default: $hue-neutral-00;
    
  }
  
  
  // SIZES
  //
  // Type sizes “t” follow a typographic scale using a formula of
  //     tᵢ = t₀•r^(i/n); where
  //        t₀= base size (fundamental frequency) = 20px for this site
  //        r = ratio between heading and body copy = 6 for this site
  //        i = the level to use relative to body copy
  //            (0: body text; 3: medium text (“<h4>”); -1: caption text)
  //        n = count of steps from body text to maximum text (the “notes”
  //            of the typographic scale) = 6 for this site
  //
  // Grid sizes “g” follow an 8-pixel grid, increasing linearly.
  // All lengths use these, including images, line heights, and buttons.
  
  
  & {
    --t6: to-rem(120);
    --t5: to-rem(89.020365);
    --t4: to-rem(66.038545);
    --t3: to-rem(48.989795);
    --t2: to-rem(36.342412);
    --t1: to-rem(26.960123);
    --t0: to-rem(20);
    --t-1: to-rem(14.836728);
    --t-2: to-rem(11.006424);
    
    --g10: to-rem(80);
    --g9: to-rem(72);
    --g8: to-rem(64);
    --g7: to-rem(56);
    --g6: to-rem(48);
    --g5: to-rem(40);
    --g4: to-rem(32);
    --g3: to-rem(24);
    --g2: to-rem(16);
    --g1: to-rem(8);
    --g0: to-rem(4);
  }
  
  
  &{
    // HAIRLINE
    // This custom property value is used wherever hairlines are used
    // (in box shadows, pseudo content, and so on). A truly one-physical-pixel
    // line depends on the display density. (Life is short. Why not be extra?)
    //
    // This should not be used in conjunction with the hairline() mixin.
    // Instead, stick to one or the other, depending on the strategy needed.
    --hairline: 1px;
    --hairline-scale: 1;
  }
  @include pixel-density(1.5) {
    --hairline: .5px;
    --hairline-scale: .5;
  }
  
  @include pixel-density(2.5) {
    --hairline: .333px;
    --hairline-scale: .333;
  }
  
  & {
    // SAFE-AREA ENVS
    // These values are redefined so that JavaScript can access them.
    --env-safe-top-pixels: env(safe-area-inset-top, 0px);
    --env-safe-right-pixels: env(safe-area-inset-right, 0px);
    --env-safe-bottom-pixels: env(safe-area-inset-bottom, 0px);
    --env-safe-left-pixels: env(safe-area-inset-left, 0px);
    
    // OPTICAL SIZING
    // TODO: Update with TASA values
    --optical-a: 16;
    --optical-b: 20;
    --optical-c: 25;
    
  }
  
  @include theme(dark) {
    --optical-a: 8;
    --optical-b: 10;
    --optical-c: 13;
  }
}

// Z-INDEX VALUES
//
// Collected in one spot to avoid random too-many-nines.
// (Stacking contexts should also be considered when positioning.)
$z-backdrop: -1;
$z-base: 1;


// TIMINGS AND EASINGS
$timing-logo: 1.75s;
$timing-link: .15s;
$delay-logo: .5s;