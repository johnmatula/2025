@use 'mixins' as *;

// TODO: Reorganize mixed declarations in a cleaner way. The current
// “& {}” kludge allows SCSS to work alongside modern, built-in CSS nesting.
// See https://sass-lang.com/d/mixed-decls for more.

// Semantic sizings
$root-max-width: s(175);


:root {
  
  // VARIABLES
  //
  // Values that will change based on the browser or user are custom CSS
  // properties. Ones that won’t change or only get overridden (like for
  // accessibility) are preprocessed SCSS variables.
  
  & {
    // Length units and factors
    --rem-factor: 1;
    
    @include at-least(w4) {
      --rem-factor: 1.2;
    }
    
    @include at-least(w5) {
      --rem-factor: 1.4;
    }
    
    
    // Margin
    --root-margin: #{s(4)};
    --root-gap: #{s(4)};
    
    @include at-least(w0) {
      --root-margin: #{s(5)};
      --root-gap: #{s(5)};
    }
    
    @include at-least(w1) {
      --root-margin: #{s(4)};
      --root-gap: #{s(6)};
    }
    
    @include at-least(w2) {
      --root-margin: #{s(6)};
      --root-gap: #{s(6)};
    }
    
    @include at-least(w3) {
      --root-margin: #{s(10)};
      --root-gap: #{s(8)};
    }
  }
}
  
  // HUES AND COLORS
  //
  // The hues themselves don’t change, so they’re represented as
  // preprocessed variables. Colors, purposefully in the same scope as hues,
  // map these generic values to specific usages with semantic variables.

    $hue-white: #fff;
    $hue-black: #000;
    $hue-transparent: #0000;
    
    $hue-neutral-ff: #f5f3f1;
    $hue-neutral-cc: #e9e7e5;
    $hue-neutral-99: #cdcac7;
    $hue-neutral-66: #a19d99;
    $hue-neutral-33: #524f4c;
    $hue-neutral-18: #2B2927;
    $hue-neutral-00: #121110;
    
    $hue-orange-ff: #fe8676;
    $hue-orange-cc: #f75843;
    $hue-orange-99: #e63d27;
    $hue-orange-66: #bf240f;
    $hue-orange-33: #9d1907;
    $hue-orange-00: #5c0d03;
    
    $hue-gold-66: #d76d00;
    $hue-gold-99: #f08830;
    $hue-gold-cc: #fa9b4b;
    $hue-gold-ff: #ffb072;
    
    // Legacyyy
    
    $hue-lime-ff: #e3fc42;
    $hue-lime-cc: #d5f029;
    $hue-lime-99: #c6dd16;
    $hue-lime-66: #a3b401;
    $hue-lime-33: #778203;
    $hue-lime-00: #4f5400;
    
    $hue-cyan-ff: #6dfdd9;
    $hue-cyan-cc: #4cefcc;
    $hue-cyan-99: #28d8bc;
    $hue-cyan-66: #18b8a0;
    $hue-cyan-33: #0b9182;
    $hue-cyan-00: #01574e;
    
    $hue-oldpurple-ff: #d5a1f7;
    $hue-oldpurple-cc: #c177f2;
    $hue-oldpurple-99: #b05ae6;
    $hue-oldpurple-66: #9b3fd4;
    $hue-oldpurple-33: #7222a3;
    $hue-oldpurple-00: #540c7f;
    
    $hue-darkerlucent-ff: #f0f0f040;
    $hue-lighterlucent-ff: #f0f0f040;

:root {
  --fill-page-default: #{$hue-neutral-ff};
  --color-text-default: #{$hue-neutral-00};
}
  
  
  
  // SIZES
  //
  // Type sizes “t” follow a typographic scale using a formula of
  //     tᵢ = t₀•r^(i/n); where
  //        t₀= base size (fundamental frequency) === 20px
  //        r = ratio between heading and body copy === 6
  //        i = the level (note) to use relative to body at 0 === [-2,6]
  //        n = count of steps from body text to maximum text (the number
  //            of positive, non-zero notes on the scale) === 6
  //
  // Space sizes “s” adhere to an 8-pixel grid, generated by the
  // s() function as defined in mixins.scss; where sᵢ = rem(i * 8px)

    $t6: rem(120);
    $t5: rem(89.020365);
    $t4: rem(66.038545);
    $t3: rem(48.989795);
    $t2: rem(36.342412);
    $t1: rem(26.960123);
    $t0: rem(20);
    $t-1: rem(14.836728);
    $t-2: rem(11.006424);

:root {
  & {
    // SAFE-AREA ENVS
    // These values are redefined so that JavaScript can access them.
    --env-safe-top-pixels: env(safe-area-inset-top, 0px);
    --env-safe-right-pixels: env(safe-area-inset-right, 0px);
    --env-safe-bottom-pixels: env(safe-area-inset-bottom, 0px);
    --env-safe-left-pixels: env(safe-area-inset-left, 0px);
    
    
    // TYPE GRADING
    // These values are added to text when light type is on dark backgrounds.
    // TODO: Update with TASA values
    --optical-a: 0;
    --optical-b: 0;
    --optical-c: 0;
    
    @include theme(dark) {
      --optical-a: 8;
      --optical-b: 10;
      --optical-c: 13;
    }
  }
}

    // Z-INDEX VALUES
    //
    // Collected in one spot to avoid random too-many-nines.
    // (Stacking contexts should also be considered when positioning.)
    $z-backdrop: -1;
    $z-base: 1;
    
    
    // TIMINGS AND EASINGS
    // TODO: Update for 2025
    